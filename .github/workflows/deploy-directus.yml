# @format

name: Deploy Directus

on:
  workflow_run:
    workflows: ['Deploy Database']
    types:
      - completed

jobs:
  deploy-directus:
    runs-on: ubuntu-latest

    steps:
      - name: Clean up Docker system
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            docker system prune -f --volumes

      - name: Ensure PostgreSQL container is running
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            if [ $(docker ps -aq -f name=directus_db) ]; then
              if [ $(docker ps -q -f name=directus_db) ]; then
                echo "PostgreSQL container is already running."
              else
                echo "Starting existing PostgreSQL container..."
                docker start directus_db
              fi
            else
              echo "Creating and starting new PostgreSQL container..."
              docker run -d --name directus_db -e POSTGRES_USER=${{ secrets.DB_USER }} -e POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }} -e POSTGRES_DB=${{ secrets.DB_DATABASE }} -p 5432:5432 postgres:latest
            fi

      - name: Deploy Directus to server via SSH
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            docker stop directus_app || true
            docker rm directus_app || true
            docker run -d --name directus_app \
            -e DB_CLIENT=pg \
            -e DB_HOST=directus_db \
            -e DB_PORT=5432 \
            -e DB_DATABASE=${{ secrets.DB_DATABASE }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e SECRET=${{ secrets.SECRET }} \
            -e PUBLIC_URL=${{ secrets.PUBLIC_URL }} \
            --link directus_db \
            -p 8055:8055 \
            directus/directus:latest

      - name: Check current directory and list files
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            echo "Current directory:"
            pwd
            echo "Listing root directory:"
            ls -la /
            echo "Listing /github:"
            ls -la /github || echo "/github not found"
            echo "Listing /github/workspace:"
            ls -la /github/workspace || echo "/github/workspace not found"
            echo "Listing /github/workspace/merlaart-directus:"
            ls -la /github/workspace/merlaart-directus || echo "/github/workspace/merlaart-directus not found"
            echo "Searching for 'snapshot' file in the current path:"
            find . -type f -name "snapshot" 2>/dev/null || echo "'snapshot' file not found"

      - name: Import Collections and Data
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            SNAPSHOT_PATH=$(find . -type f -name "snapshot" 2>/dev/null | head -n 1)
            if [ -n "$SNAPSHOT_PATH" ]; then
              echo "Snapshot file found at $SNAPSHOT_PATH"
              ls -la "$SNAPSHOT_PATH"
              docker cp "$SNAPSHOT_PATH" directus_app:/snapshot
              docker exec directus_app npx directus schema apply /snapshot
            else
              echo "Error: Snapshot file does not exist."
              exit 1
            fi
